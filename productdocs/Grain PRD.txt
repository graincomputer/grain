## **1. PROJECT OVERVIEW & PRODUCT CONCEPTS**

# Grain - Digital Workforce Platform

## Vision
Grain is a multi-user digital workforce platform that extends Vercel's Chat SDK with Mastra-powered agents, enabling teams to collaborate with AI agents as naturally as they do with human colleagues. It combines conversational AI, project management, and intelligent automation into a unified workspace.

## Engineering Approach

We are in Direct Edit Mode. We modify the Chat SDK template in-place for clarity and velocity. Overlay separation is no longer a constraint.

- Modify existing `app/*`, `components/*`, and `lib/*` when it produces the simplest code.
- Enforce workspace isolation at the data and API layers (every query scoped by `workspaceId`).
- Keep agent integrations testable; prefer a small wrapper around Mastra when usage grows.
- Database: add Grain tables in `lib/db/schema.ts` (grouped under section headers) or `lib/db/schema/grain.ts` — both acceptable.
- Document notable design decisions in `productdocs/` and PR descriptions.

## Product Architecture

### 1. **Workspace System**
- **Multi-tenancy**: Each workspace is an isolated environment
- **Billing Boundary**: Plans and usage tracked per workspace
- **Member Roles**: Owner, Admin, Member, Guest
- **Resource Limits**: Based on subscription tier

### 2. **Digital Workforce (Agents)**
```
Agent Lifecycle:
Create → Configure → Share → Assign → Execute → Learn → Improve
```

**Agent Properties**:
- **Identity**: Name, avatar, role (researcher, developer, analyst, etc.)
- **Capabilities**: Model, tools (including other MCP servers), skills, constraints
- **Performance**: Success rate, response time, total runs
- **Access**: Private, workspace-wide, or public

**Agent Features**:
- Assignable to tasks like human workers
- Maintains conversation context
- Can hand off to humans when needed
- Performance tracked and optimized

### 3. **Project Management**
**Hierarchy**:
```
Workspace
  └── Projects
       └── Tasks
            └── Assignments (Human or Agent)
```

**Task Intelligence**:
- Auto-assignment to best available agent
- Human review requirements
- Time tracking and estimates
- Priority and deadline management

### 4. **Conversational Interface**
**Enhanced Chat Features**:
- Slash commands (`/project`, `/task`, `/agent`)
- @mentions for humans and agents
- Inline task creation and updates
- Agent responses with attribution
- Tool execution visibility

### 5. **Tool & Workflow System**

Our tool system is designed for power and extensibility, with a focus on leveraging pre-built integrations to maximize development velocity.

**Integration Strategy**:
- **Primary Tool Provider**: We will use **Composio** as our primary integration layer. This provides a rich "toolbelt" of pre-built, production-ready actions for hundreds of third-party applications (e.g., Gmail, GitHub, Slack).
- **Authentication**: For tools requiring user-specific data access, the system will use a standard OAuth2 flow managed by Composio. On first use of a tool, the user will be prompted to connect their account via the third-party's official, secure login page. This one-time setup ensures security and a seamless user experience for all future actions.

**Tool Types**:
- **Composio-Managed**: Pre-built integrations for popular services.
- **Built-in**: Core functions provided by Grain (e.g., weather, search).
- **Custom**: User-created functions for specialized tasks.
- **MCP (Model Context Protocol)**: Agents can call other MCP-compliant agents as tools.

**Workflow Capabilities**:
- Visual workflow builder
- Conditional logic
- Human approval steps
- Scheduled execution
- Event triggers

### 6. **Investigation Panel**
- **Real-time Activity Stream**: Live feed of all actions taken by agents and users.
- **Task Deep-Dive**: Inspect agent reasoning, tool calls, and outputs for any given task.
- **Audit Trail**: Immutable log of all workspace activities, filterable by user, agent, or project.

## **2. API & EXTENSIBILITY**

Grain is designed as an open platform. We will expose core functionalities through a public API and enable other AI clients to interact with Grain workspaces.

- **Public API**: All projects, tasks, and agents will be manageable via a REST/GraphQL API.
- **Grain as an MCP Server**: Workspaces will be exposable as a secure MCP endpoint. This allows users to bring their own AI clients (e.g., in ChatGPT, Claude) to interact with their Grain agents, tasks, and projects.
- **Webhook Support**: Outbound webhooks for key events (e.g., task completion, agent message) to integrate with other systems.

## **3. KEY USER FLOWS**

### 1. **Quick Task Creation**
```
User: /task "Research competitor pricing" @ResearchBot
System: ✓ Task created and assigned to ResearchBot
ResearchBot: I'll analyze competitor pricing across 5 main competitors...
```

### 2. **Project Setup with Templates**
```
User: /project "Q1 Product Launch" --template=product-launch
System: ✓ Created project with 12 tasks, assigned 3 to agents
```

### 3. **Agent Collaboration**
```
User: "Can you help me review this code?"
CodeReviewBot: "I'll analyze the code for best practices..."
[Creates subtask, executes review, provides feedback]
User: "Please fix the security issues you found"
CodeReviewBot: [Updates code, creates PR]
```

## Data Model Overview

### Core Entities
1. **Workspace** - Tenant boundary
2. **User** - Human accounts
3. **Agent** - AI workers
4. **Project** - Work containers
5. **Task** - Work units
6. **Assignment** - Links tasks to workers
7. **Tool** - Executable functions
8. **Conversation** - Chat threads
9. **Activity** - Audit trail

### Key Relationships
- Users belong to Workspaces via Memberships
- Agents are created within Workspaces
- Tasks can be assigned to Users OR Agents
- Conversations can spawn Tasks
- Agents use Tools to complete work
- All actions create Activity logs

## Technical Stack
- **Frontend**: Next.js (App Router), Tailwind CSS, shadcn/ui
- **Backend**: Next.js API routes, Server Actions (direct edits allowed)
- **Database**: PostgreSQL (Neon), Drizzle ORM (Grain tables live with core schema)
- **AI**: Vercel AI SDK for the chat interface.
- **Agent Framework**: **Mastra** for agent lifecycle management, reasoning, and orchestration.
- **Tool Integration**: **Composio** for a pre-built toolbelt and third-party app integrations.
- **Auth**: Auth.js (NextAuth) with workspace roles.
- **Storage**: Vercel Blob
- **Real-time**: Server-Sent Events for streaming

## Differentiation
1. **Unified Interface**: Chat, tasks, and agents in one platform
2. **True Multi-Agent**: Agents are first-class team members
3. **Open Ecosystem**: Create and share agents/tools
4. **Progressive Enhancement**: Works as chat, scales to workforce
5. **Developer-First**: API-driven, extensible architecture

## Success Metrics
- **Activation**: User creates first agent and completes task
- **Engagement**: Tasks completed per workspace per week
- **Efficiency**: % of tasks completed by agents vs humans
- **Quality**: Agent task success rate
- **Growth**: Agents shared across workspaces

---